{"ast":null,"code":"import { loginSlice, registerSlice } from '../Slice/userSlice';\nimport { publicRequest } from '../requestMethods';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch(loginSlice.actions.loginRequest);\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await publicRequest.post(`/login`, {\n      email,\n      password\n    }, config);\n    dispatch(loginSlice.actions.loginSuccess(data.user));\n  } catch (err) {\n    dispatch(loginSlice.actions.loginFailure(err.response.data.message));\n  }\n};\nexport const register = userData => async dispatch => {\n  try {\n    dispatch(registerSlice.actions.registerRequest());\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await publicRequest.post(`/api/v1/register`, userData, config);\n    dispatch(registerSlice.actions.registerSuccess(data.user));\n  } catch (error) {\n    dispatch(registerSlice.actions.registerFailure(error.response.data.message));\n  }\n};","map":{"version":3,"names":["loginSlice","registerSlice","publicRequest","login","email","password","dispatch","actions","loginRequest","config","headers","data","post","loginSuccess","user","err","loginFailure","response","message","register","userData","registerRequest","registerSuccess","error","registerFailure"],"sources":["C:/Users/thuan/Desktop/watchshop/frontend/src/redux/callAPI/userCall.js"],"sourcesContent":["import {\r\n    loginSlice,\r\n    registerSlice\r\n} from '../Slice/userSlice'\r\nimport {publicRequest} from '../requestMethods'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try{\r\n        dispatch(loginSlice.actions.loginRequest);\r\n\r\n        const config = { headers: { \"Content-Type\": \"application/json\" } }; \r\n\r\n        const {data} = await publicRequest.post(\r\n            `/login`,\r\n            {email, password},\r\n            config,\r\n        )\r\n        dispatch(loginSlice.actions.loginSuccess(data.user));\r\n    }catch(err){\r\n        dispatch(loginSlice.actions.loginFailure(err.response.data.message));\r\n    }\r\n}\r\n\r\nexport const register = (userData) => async (dispatch) => {\r\n    try{\r\n        dispatch(registerSlice.actions.registerRequest());\r\n        const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n\r\n        const { data } = await publicRequest.post(`/api/v1/register`, userData, config);\r\n\r\n        dispatch(registerSlice.actions.registerSuccess(data.user))\r\n    }catch(error){    \r\n        dispatch(registerSlice.actions.registerFailure(error.response.data.message))\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,SACIA,UADJ,EAEIC,aAFJ,QAGO,oBAHP;AAIA,SAAQC,aAAR,QAA4B,mBAA5B;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;EAC1D,IAAG;IACCA,QAAQ,CAACN,UAAU,CAACO,OAAX,CAAmBC,YAApB,CAAR;IAEA,MAAMC,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,gBAAgB;MAAlB;IAAX,CAAf;IAEA,MAAM;MAACC;IAAD,IAAS,MAAMT,aAAa,CAACU,IAAd,CAChB,QADgB,EAEjB;MAACR,KAAD;MAAQC;IAAR,CAFiB,EAGjBI,MAHiB,CAArB;IAKAH,QAAQ,CAACN,UAAU,CAACO,OAAX,CAAmBM,YAAnB,CAAgCF,IAAI,CAACG,IAArC,CAAD,CAAR;EACH,CAXD,CAWC,OAAMC,GAAN,EAAU;IACPT,QAAQ,CAACN,UAAU,CAACO,OAAX,CAAmBS,YAAnB,CAAgCD,GAAG,CAACE,QAAJ,CAAaN,IAAb,CAAkBO,OAAlD,CAAD,CAAR;EACH;AACJ,CAfM;AAiBP,OAAO,MAAMC,QAAQ,GAAIC,QAAD,IAAc,MAAOd,QAAP,IAAoB;EACtD,IAAG;IACCA,QAAQ,CAACL,aAAa,CAACM,OAAd,CAAsBc,eAAtB,EAAD,CAAR;IACA,MAAMZ,MAAM,GAAG;MAAEC,OAAO,EAAE;QAAE,gBAAgB;MAAlB;IAAX,CAAf;IAEA,MAAM;MAAEC;IAAF,IAAW,MAAMT,aAAa,CAACU,IAAd,CAAoB,kBAApB,EAAuCQ,QAAvC,EAAiDX,MAAjD,CAAvB;IAEAH,QAAQ,CAACL,aAAa,CAACM,OAAd,CAAsBe,eAAtB,CAAsCX,IAAI,CAACG,IAA3C,CAAD,CAAR;EACH,CAPD,CAOC,OAAMS,KAAN,EAAY;IACTjB,QAAQ,CAACL,aAAa,CAACM,OAAd,CAAsBiB,eAAtB,CAAsCD,KAAK,CAACN,QAAN,CAAeN,IAAf,CAAoBO,OAA1D,CAAD,CAAR;EACH;AACJ,CAXM"},"metadata":{},"sourceType":"module"}