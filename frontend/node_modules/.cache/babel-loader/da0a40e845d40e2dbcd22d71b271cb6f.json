{"ast":null,"code":"import { loginSlice, registerSlice } from '../Slice/userSlice';\nimport { publicRequest } from '../requestMethods';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nexport const login = createAsyncThunk(\"user/login\", async user => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const {\n    data\n  } = await publicRequest.post(`/login`, {\n    email,\n    password\n  }, config);\n  return data;\n}); // export const login = (email, password) => async (dispatch) => {\n//     try{\n//         dispatch(loginSlice.actions.loginRequest);\n//         const config = { headers: { \"Content-Type\": \"application/json\" } }; \n//         const {data} = await publicRequest.post(\n//             `/login`,\n//             {email, password},\n//             config,\n//         )\n//         dispatch(loginSlice.actions.loginSuccess(data.user));\n//     }catch(err){\n//         dispatch(loginSlice.actions.loginFailure(err.response.data.message));\n//     }\n// }\n\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch(registerSlice.actions.registerRequest());\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await publicRequest.post(`/register`, {\n      name,\n      email,\n      password\n    }, config);\n    dispatch(registerSlice.actions.registerSuccess(data.user));\n  } catch (err) {\n    dispatch(registerSlice.actions.registerFailure(err.response.data.message));\n  }\n};","map":{"version":3,"names":["loginSlice","registerSlice","publicRequest","createAsyncThunk","login","user","config","headers","data","post","email","password","register","name","dispatch","actions","registerRequest","registerSuccess","err","registerFailure","response","message"],"sources":["C:/Users/thuan/Desktop/watchshop/frontend/src/redux/callAPI/userCall.js"],"sourcesContent":["import {\r\n    loginSlice,\r\n    registerSlice\r\n} from '../Slice/userSlice'\r\nimport {publicRequest} from '../requestMethods'\r\n\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const login = createAsyncThunk (\r\n    \"user/login\",\r\n    async (user)=> {\r\n            const config = { headers: { \"Content-Type\": \"application/json\" } }; \r\n            const {data} = await publicRequest.post(\r\n                `/login`,\r\n                {email, password},\r\n                config,\r\n            )\r\n            return data\r\n\r\n    }\r\n)\r\n\r\n// export const login = (email, password) => async (dispatch) => {\r\n//     try{\r\n//         dispatch(loginSlice.actions.loginRequest);\r\n\r\n//         const config = { headers: { \"Content-Type\": \"application/json\" } }; \r\n\r\n//         const {data} = await publicRequest.post(\r\n//             `/login`,\r\n//             {email, password},\r\n//             config,\r\n//         )\r\n//         dispatch(loginSlice.actions.loginSuccess(data.user));\r\n//     }catch(err){\r\n//         dispatch(loginSlice.actions.loginFailure(err.response.data.message));\r\n//     }\r\n// }\r\n\r\nexport const register = (name,email,password) => async (dispatch) => {\r\n    try{\r\n        dispatch(registerSlice.actions.registerRequest());\r\n        const config =  { headers: { \"Content-Type\": \"application/json\" } }; \r\n\r\n        const { data } = await publicRequest.post(\r\n            `/register`, \r\n            {name,email,password}, \r\n            config\r\n        );\r\n        dispatch(registerSlice.actions.registerSuccess(data.user))\r\n    }catch(err){    \r\n        dispatch(registerSlice.actions.registerFailure(err.response.data.message))\r\n    }\r\n}\r\n\r\n"],"mappings":"AAAA,SACIA,UADJ,EAEIC,aAFJ,QAGO,oBAHP;AAIA,SAAQC,aAAR,QAA4B,mBAA5B;AAEA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,OAAO,MAAMC,KAAK,GAAGD,gBAAgB,CACjC,YADiC,EAEjC,MAAOE,IAAP,IAAe;EACP,MAAMC,MAAM,GAAG;IAAEC,OAAO,EAAE;MAAE,gBAAgB;IAAlB;EAAX,CAAf;EACA,MAAM;IAACC;EAAD,IAAS,MAAMN,aAAa,CAACO,IAAd,CAChB,QADgB,EAEjB;IAACC,KAAD;IAAQC;EAAR,CAFiB,EAGjBL,MAHiB,CAArB;EAKA,OAAOE,IAAP;AAEP,CAXgC,CAA9B,C,CAcP;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,QAAQ,GAAG,CAACC,IAAD,EAAMH,KAAN,EAAYC,QAAZ,KAAyB,MAAOG,QAAP,IAAoB;EACjE,IAAG;IACCA,QAAQ,CAACb,aAAa,CAACc,OAAd,CAAsBC,eAAtB,EAAD,CAAR;IACA,MAAMV,MAAM,GAAI;MAAEC,OAAO,EAAE;QAAE,gBAAgB;MAAlB;IAAX,CAAhB;IAEA,MAAM;MAAEC;IAAF,IAAW,MAAMN,aAAa,CAACO,IAAd,CAClB,WADkB,EAEnB;MAACI,IAAD;MAAMH,KAAN;MAAYC;IAAZ,CAFmB,EAGnBL,MAHmB,CAAvB;IAKAQ,QAAQ,CAACb,aAAa,CAACc,OAAd,CAAsBE,eAAtB,CAAsCT,IAAI,CAACH,IAA3C,CAAD,CAAR;EACH,CAVD,CAUC,OAAMa,GAAN,EAAU;IACPJ,QAAQ,CAACb,aAAa,CAACc,OAAd,CAAsBI,eAAtB,CAAsCD,GAAG,CAACE,QAAJ,CAAaZ,IAAb,CAAkBa,OAAxD,CAAD,CAAR;EACH;AACJ,CAdM"},"metadata":{},"sourceType":"module"}