{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { login } from '../callAPI/userCall';\nexport const loginSlice = createSlice({\n  name: 'loginUser',\n  initialState: {\n    currentUser: null,\n    isLoading: false,\n    isAuthenticated: false,\n    error: false\n  },\n  reducers: {// loginRequest: (state) => {\n    //     state.isLoading = true\n    //     state.isAuthenticated = false\n    // },\n    // loginSuccess: (state, action) =>{\n    //     state.currentUser = action.payload\n    //     state.isLoading = false\n    //     state.isAuthenticated = true\n    //     state.error=null\n    // },\n    // loginFailure:(state, action) => {\n    //     state.currentUser = null\n    //     state.isLoading = false\n    //     state.isAuthenticated = false\n    //     state.error = action.payload\n    // },\n    // clearError:(state)=>{\n    //     state.error=null\n    // }\n  },\n  extraReducers: builder => {\n    builder.addCase(login, (state, action) => {});\n  }\n});\nexport const registerSlice = createSlice({\n  name: 'registerUser',\n  initialState: {\n    currentUser: {},\n    isLoading: false,\n    isAuthenticated: false,\n    error: null\n  },\n  reducers: {\n    registerRequest: state => {\n      state.isLoading = true;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    registerSuccess: (state, action) => {\n      state.currentUser = action.payload;\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.error = null;\n    },\n    registerFailure: (state, action) => {\n      state.currentUser = null;\n      state.isLoading = false;\n      state.isAuthenticated = false;\n      state.error = action.payload;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  }\n});","map":{"version":3,"names":["createSlice","login","loginSlice","name","initialState","currentUser","isLoading","isAuthenticated","error","reducers","extraReducers","builder","addCase","state","action","registerSlice","registerRequest","registerSuccess","payload","registerFailure","clearError"],"sources":["C:/Users/thuan/Desktop/watchshop/frontend/src/redux/Slice/userSlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\"\r\n\r\nimport {login} from  '../callAPI/userCall'\r\n\r\nexport const loginSlice = createSlice({\r\n    name:'loginUser',\r\n    initialState:{\r\n        currentUser: null,\r\n        isLoading: false,\r\n        isAuthenticated : false,\r\n        error: false\r\n    },\r\n    reducers:{\r\n        // loginRequest: (state) => {\r\n        //     state.isLoading = true\r\n        //     state.isAuthenticated = false\r\n        // },\r\n        // loginSuccess: (state, action) =>{\r\n        //     state.currentUser = action.payload\r\n        //     state.isLoading = false\r\n        //     state.isAuthenticated = true\r\n        //     state.error=null\r\n   \r\n        // },\r\n        // loginFailure:(state, action) => {\r\n        //     state.currentUser = null\r\n        //     state.isLoading = false\r\n        //     state.isAuthenticated = false\r\n        //     state.error = action.payload\r\n        // },\r\n        // clearError:(state)=>{\r\n        //     state.error=null\r\n        // }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n        .addCase(login,(state,action)=>{\r\n\r\n        })\r\n    }\r\n\r\n})\r\n\r\nexport const registerSlice = createSlice({\r\n    name:'registerUser',\r\n    initialState:{\r\n        currentUser : {},\r\n        isLoading: false,\r\n        isAuthenticated: false,\r\n        error: null\r\n    },\r\n    reducers:{\r\n        registerRequest:(state)=>{\r\n            state.isLoading = true\r\n            state.isAuthenticated = false\r\n            state.error = null\r\n        },\r\n        registerSuccess:(state, action)=>{\r\n            state.currentUser = action.payload\r\n            state.isLoading = false\r\n            state.isAuthenticated = true\r\n            state.error = null\r\n        },\r\n        registerFailure:(state, action)=>{\r\n            state.currentUser = null\r\n            state.isLoading = false\r\n            state.isAuthenticated = false\r\n            state.error = action.payload\r\n        },\r\n        clearError:(state)=>{\r\n            state.error=null\r\n        }\r\n    }\r\n\r\n})\r\n\r\n"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,SAAQC,KAAR,QAAqB,qBAArB;AAEA,OAAO,MAAMC,UAAU,GAAGF,WAAW,CAAC;EAClCG,IAAI,EAAC,WAD6B;EAElCC,YAAY,EAAC;IACTC,WAAW,EAAE,IADJ;IAETC,SAAS,EAAE,KAFF;IAGTC,eAAe,EAAG,KAHT;IAITC,KAAK,EAAE;EAJE,CAFqB;EAQlCC,QAAQ,EAAC,CACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EApBK,CARyB;EA8BlCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACNC,OADD,CACSX,KADT,EACe,CAACY,KAAD,EAAOC,MAAP,KAAgB,CAE9B,CAHD;EAIH;AAnCiC,CAAD,CAA9B;AAuCP,OAAO,MAAMC,aAAa,GAAGf,WAAW,CAAC;EACrCG,IAAI,EAAC,cADgC;EAErCC,YAAY,EAAC;IACTC,WAAW,EAAG,EADL;IAETC,SAAS,EAAE,KAFF;IAGTC,eAAe,EAAE,KAHR;IAITC,KAAK,EAAE;EAJE,CAFwB;EAQrCC,QAAQ,EAAC;IACLO,eAAe,EAAEH,KAAD,IAAS;MACrBA,KAAK,CAACP,SAAN,GAAkB,IAAlB;MACAO,KAAK,CAACN,eAAN,GAAwB,KAAxB;MACAM,KAAK,CAACL,KAAN,GAAc,IAAd;IACH,CALI;IAMLS,eAAe,EAAC,CAACJ,KAAD,EAAQC,MAAR,KAAiB;MAC7BD,KAAK,CAACR,WAAN,GAAoBS,MAAM,CAACI,OAA3B;MACAL,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,eAAN,GAAwB,IAAxB;MACAM,KAAK,CAACL,KAAN,GAAc,IAAd;IACH,CAXI;IAYLW,eAAe,EAAC,CAACN,KAAD,EAAQC,MAAR,KAAiB;MAC7BD,KAAK,CAACR,WAAN,GAAoB,IAApB;MACAQ,KAAK,CAACP,SAAN,GAAkB,KAAlB;MACAO,KAAK,CAACN,eAAN,GAAwB,KAAxB;MACAM,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACI,OAArB;IACH,CAjBI;IAkBLE,UAAU,EAAEP,KAAD,IAAS;MAChBA,KAAK,CAACL,KAAN,GAAY,IAAZ;IACH;EApBI;AAR4B,CAAD,CAAjC"},"metadata":{},"sourceType":"module"}